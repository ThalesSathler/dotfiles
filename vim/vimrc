set nocompatible
let mapleader="\<Space>"

set guioptions-=T
set guioptions-=m

set backspace=indent,eol,start
set wildignore+=*.py~,build/*.*

set backup		" keep a backup file
set history=128		" keep 50 lines of command line history
set ruler		" show the cursor position all the time
set number
set showcmd		" display incomplete commands
set incsearch		" do incremental searching
syntax on

set ts=2
set sw=2
set et

filetype plugin indent on
set autoindent
set autoread

set backupdir=/tmp,~/.vim/.backups,.
set swapfile

" Basic Docs about installed plugins
"
" vim-scripts/Merginal
" Inside branch list window
" * cc Checkout selected branch
" * A Create a new branch based on currently checked out branch
" * M merge branch under cursor with current checked out branch
" * rn Prompt to renamea branch under cursor
"
" tpope/vim-fugitive
" Inside fugitive window
" cc Commit current files
" ca Commit ammend (can edit commit message)
" cA Commit ammend with current commit message
" dp Display unified diff of file
"
"

set rtp+=~/.vim/bundle/Vundle.vim/
call vundle#begin()

" Plugins
" Dependencies for sirver/ultisnips
Plugin 'MarcWeber/vim-addon-mw-utils'
Plugin 'tomtom/tlib_vim'
Plugin 'honza/vim-snippets'

Plugin 'sirver/ultisnips'

Plugin 'ervandew/supertab'
Plugin 'bling/vim-airline'
Plugin 'spf13/vim-colors'
Plugin 'kien/ctrlp.vim'
Plugin 'majutsushi/tagbar'
Plugin 'tpope/vim-fugitive'
Plugin 'vim-scripts/surround.vim'
Plugin 'vim-scripts/tComment'
Plugin 'scrooloose/nerdtree'
Plugin 'Shougo/neocomplete.vim'
Plugin 'zenorocha/dracula-theme', {'rtp': 'vim/'}
Plugin 'powerline/powerline', {'rtp': 'powerline/bindings/vim/'}
Plugin 'matze/vim-move'
Plugin 'myusuf3/numbers.vim'
Plugin 'alvan/vim-closetag'
Plugin 'ekalinin/Dockerfile.vim'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'EinfachToll/DidYouMean'
Plugin 'fatih/vim-go' " Run :GoInstallBinaries
Plugin 'tpope/vim-dispatch'
Plugin 'mhinz/vim-signify'
Plugin 'nathanaelkane/vim-indent-guides' " <leader>ig to toggle visbility
Plugin 'airblade/vim-rooter'
Plugin 'artur-shaik/vim-javacomplete2' " Run mvn complie inside .vim/bundle/vim-javacomplete2/libs/javavi
Plugin 'vim-scripts/Merginal'
Plugin 'elzr/vim-json' " checking for json files, highlighting errors
Plugin 'vim-scripts/Syntastic'
Plugin 'alfredodeza/pytest.vim'
Plugin 'mileszs/ack.vim'

Plugin 'vim-scripts/indentpython.vim'
Plugin 'ntpeters/vim-better-whitespace'

" ColorSchemes
Plugin 'chriskempson/base16-vim'

call vundle#end()

colorscheme base16-solarflare

"Ctrl+F4 closes current buffer
nnoremap <C-F4> :close<cr>


" Mapping for search using :Ack
nnoremap <leader>a :Ack <cword><CR>
inoremap <C-F> <ESC>:Ack <cword><CR>
" When on VISUAL mode:
" yank current selected text to default register (y)
" Selects Ack for search (:Ack)
" Types default register's content back (<C-R>")
" hits enter <CR>
vnoremap <leader>a y:Ack <C-R>"<CR>

" Copy/Paste from/to clipboard
vmap <Leader>y "+y
nmap <Leader>p "+p
nmap <Leader>P "+P
vmap <Leader>p "+p
vmap <Leader>P "+P


" Navigate to previous tag o tagstack
nmap <leader>[ :pop<CR>


" For alfredodeza/pytest.vim
nnoremap <leader>tm :Pytest method<CR>
nnoremap <leader>tm :Pytest method<CR>
nnoremap <leader>tc :Pytest class<CR>
nnoremap <leader>tf :Pytest file<CR>
nnoremap <leader>tp :Pytest project<CR>


" For Syntastic
" Recomended settings
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

let g:syntastic_python_checkers = ['python']
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" For neocomplete
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
let g:neocomplete#sources#syntax#min_keyword_length = 1

" For sirver/ultisnips
let g:UltiSnipsExpandTrigger="<C-J>"

" For artur-shaik/javacomplete2
autocmd FileType java setlocal omnifunc=javacomplete#Complete

" For airblade/vim-rooter
let g:rooter_change_directory_for_non_project_files = 'home'
let g:rooter_silent_chdir = 1
let g:rooter_resolve_links = 1

" For signify plugin
let g:signify_vcs_list = ['git']
let g:signify_realtime = 1

nmap <leader>gj <plug>(signify-next-hunk)
nmap <leader>gk <plug>(signify-prev-hunk)


" For closetag plugin
autocmd FileType html,htmldjango,jinjahtml,eruby,mako let b:closetag_html_style=1
let g:closetag_filenames = "*.html,*.xhtml,*.phtml,*.xml"

" Supertab
let g:SuperTabContextDefaultCompletionType = "<c-n>"
let g:SuperTabDefaultCompletionType = "<c-n>"

" Tagbar
let g:tagbar_usearrows = 1
let g:tagbar_autoclose = 1
noremap <Leader>l :TagbarToggle<CR>

" NERDTree
noremap <Leader>n :NERDTreeToggle<CR>
let g:nerdtree_tabs_open_on_gui_startup = 0


""" Vim-AirLine
"
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#left_sep = ' '
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#tab_nr_type = 2 " splits and tab number
let g:airline#extensions#tabline#fnamemod = ':p:.'
let g:airline#extensions#tabline#formatter = 'unique_tail'
let g:airline#extensions#tabline#show_close_button = 0

" New tab
noremap <C-t> :tabnew<CR>
noremap <leader>t :tab sball<CR>


" Thanks to denilsonsa
function! Salvar_setKeys()
  "Use Ctrl+S to save
  nnoremap <silent> <C-S>      :update<CR>
  vnoremap <silent> <C-S> <C-C>:update<CR>
  inoremap <silent> <C-S> <C-O>:update<CR>

  nnoremap <silent> <C-S-S>      :wall<CR>
  vnoremap <silent> <C-S-S> <C-C>:wall<CR>
  inoremap <silent> <C-S-S> <C-O>:wall<CR>
endfunc

au GUIEnter * call Salvar_setKeys()

" For fugitive.vim
nnoremap <leader>gs :Gstatus <cr>
nnoremap <leader>gc :Gcommit <cr>
nnoremap <leader>gd :Gvdiff <cr>
nnoremap <leader>gp :Git push <cr>

" For Merginal
nnoremap <leader>gb :MerginalToggle<cr>

""" CTRLP
"
let g:ctrlp_cmd = "CtrlP"
let g:ctrlp_working_path_mode = 'ra'
let g:ctrlp_regexp = 1
let g:ctrlp_switch_buffer = 'Et'
let g:ctrlp_match_window = 'max:20'
let g:ctrlp_use_caching = 1
let g:ctrlp_cache_dir = $HOME.'/.cache/ctrlp'

let g:ctrlp_prompt_mappings = {
    \ 'AcceptSelection("e")': ['<c-t>'],
    \ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
    \ }

nnoremap <C-d> :CtrlPDir ~/

" Some interesting annotations about vim commands

" Movendo janelas/splits ^W seguido de shift+ H ou J ou K ou L
"
" i = insere antes do cursor
" a = insere após o cursor
" I = insere no início da linha (respeitando indentação)
" gI = insere no início da linha
" A = insere no final da linha
"
" cc = change line
" dd = delete line
" cw = change word
" dw = delete word
" C = change until the end of the line
" D = delete until the end of the line
" Y = DOESN'T copy until EOL. :( (mas eu remapeei no meu vimrc)
"
" ; = refaz o último f, F, t, T
" , = refaz o último f, F, t, T na direção contrária
"
" di" = isso nao precisa do surround
" ci" = isso nao precisa do surround
"
" gugu = lowercase line
" guu  = lowercase line
" gUU  = uppercase line
" gUgU = uppercase line
" gu ou gU seguido de movimento = similar ao d, y, c, ...
" ~ = toggle case of a character
"
" Ctrl+A = incrementa
" Ctrl+X = decrementa
"
" visual...
" Ctrl+V = visual (block)
" pode ser combinado com I ou A para inserir algo em todas as linhas
"
" H, M, L: Move o cursor para uma posição da tela atual. High, Medium, Low
" ctrl+e (Up) e ctrl+y (Down) Scroll de uma linha por vez, sem mover o cursor
"
"
" Macros:
" qa = inicia a gravação no registrador a (poderia ser qualquer letra)
" q = termina a gravação
" @a = executa a macro gravada em a
" @@ = re-executa a última macro
"
" Copy-and-paste from different registers:
" "a = Usa o registrador a (veja :help registers para lista de registradores)
" "+ = buffer de ctrl+c e ctrl+v
" "* = buffer de X11 primary selection
" "/ = buffer de busca
"
" No modo de inserção (ou na linha de :comando):
" ^R seguido de um registrador = insere o conteúdo daquele registrador
"
"
" No meu vimrc o Ctrl-S salva, F12 faz toggle de wrap, shift+F12 faz toggle de
" horizontal scrollbar.
"


autocmd BufRead,BufNewFile *.ino set filetype=cpp
autocmd BufRead,BufNewFile Dockerfile-* set syntax=dockerfile


nnoremap <Leader>v :tabedit $MYVIMRC<cr>
nnoremap <Leader>s :tabedit ~/.ssh/config<cr>
nnoremap <Leader>z :tabedit $ZDOTDIR/.zshrc<cr>

" http://input.fontbureau.com/
set guifont=Input\ Regular\ 12
